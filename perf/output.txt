Reusing repo 'big-js'
Reusing repo 'njsscan'
Reusing repo 'dropbox-sdk-js'
Reusing repo 'zulip'
------ semgrep.bench.big-js.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.big-js.std.duration = 35.792 s
Result: 0 findings, 3 parse errors
------ semgrep.bench.big-js.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.big-js.no-cache.duration = 35.122 s
Result: 0 findings, 3 parse errors
------ semgrep.bench.big-js.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.big-js.max-cache.duration = 36.812 s
Result: 0 findings, 3 parse errors
------ semgrep.bench.big-js.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.big-js.no-bloom.duration = 64.302 s
Result: 0 findings, 3 parse errors
------ semgrep.bench.big-js.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.big-js.no-gc-tuning.duration = 36.439 s
Result: 0 findings, 3 parse errors
------ semgrep.bench.big-js.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.big-js.set_filters.duration = 21.014 s
Result: 0 findings, 3 parse errors
------ semgrep.bench.big-js.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/big-js
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/big-js/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/big-js/input/big-js --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.big-js.experimental.duration = 0.945 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.njsbox.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.njsbox.std.duration = 46.223 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.njsbox.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.njsbox.no-cache.duration = 46.602 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.njsbox.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.njsbox.max-cache.duration = 46.255 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.njsbox.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.njsbox.no-bloom.duration = 62.603 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.njsbox.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.njsbox.no-gc-tuning.duration = 48.779 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.njsbox.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.njsbox.set_filters.duration = 45.669 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.njsbox.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/njsbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/njsbox/input/njsscan/njsscan/rules/semantic_grep /Users/emma/workspace/semgrep/perf/bench/njsbox/input/dropbox-sdk-js --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.njsbox.experimental.duration = 43.836 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.zulip.std.duration = 6.464 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.zulip.no-cache.duration = 6.423 sReusing repo 'libcloud'
Reusing repo 'pytest-flakefinder'

Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.zulip.max-cache.duration = 6.481 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.zulip.no-bloom.duration = 6.349 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.zulip.no-gc-tuning.duration = 7.524 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.zulip.set_filters.duration = 5.683 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.zulip.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/zulip
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/zulip/input/semgrep.yml /Users/emma/workspace/semgrep/perf/bench/zulip/input/zulip --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.zulip.experimental.duration = 6.256 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.apache.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.apache.std.duration = 29.924 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.apache.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.apache.no-cache.duration = 29.671 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.apache.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.apache.max-cache.duration = 29.581 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.apache.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.apache.no-bloom.duration = 25.659 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.apache.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.apache.no-gc-tuning.duration = 34.735 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.apache.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.apache.set_filters.duration = 23.510 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.apache.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/apache
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/apache/input/django.yml /Users/emma/workspace/semgrep/perf/bench/apache/input/libcloud --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.apache.experimental.duration = 14.140 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.dropbox.std.duration = 3.057 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.dropbox.no-cache.duration = 3.131 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.dropbox.max-cache.duration = 3.070 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.dropbox.no-bloom.duration = 3.123 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignoreReusing repo 'bifrost'
Reusing repo 'lemur'

extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.dropbox.no-gc-tuning.duration = 3.038 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.dropbox.set_filters.duration = 3.044 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.dropbox.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/dropbox
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/dropbox/input/flask.yml /Users/emma/workspace/semgrep/perf/bench/dropbox/input/pytest-flakefinder --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.dropbox.experimental.duration = 3.297 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.coinbase.std.duration = 22.680 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.coinbase.no-cache.duration = 22.163 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.coinbase.max-cache.duration = 22.301 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.coinbase.no-bloom.duration = 22.356 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.coinbase.no-gc-tuning.duration = 22.385 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.coinbase.set_filters.duration = 22.146 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.coinbase.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/coinbase
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/coinbase/input/rules /Users/emma/workspace/semgrep/perf/bench/coinbase/input/bifrost --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.coinbase.experimental.duration = 44.200 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.netflix.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.netflix.std.duration = 96.095 s
Result: 26 findings, 0 parse errors
------ semgrep.bench.netflix.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.netflix.no-cache.duration = 98.659 s
Result: 26 findings, 0 parse errors
------ semgrep.bench.netflix.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.netflix.max-cache.duration = 94.996 s
Result: 26 findings, 0 parse errors
------ semgrep.bench.netflix.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.netflix.no-bloom.duration = 97.555 s
Result: 26 findings, 0 parse errors
------ semgrep.bench.netflix.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.netflix.no-gc-tuning.duration = 99.626 s
Result: 26 findings, 0 parse errors
------ semgrep.bench.netflix.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.netflix.set_filters.duration = 91.493 s
Result: 26 findings, 0 parse errors
------ semgrep.bench.netflix.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/netflix
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/netflix/input/rules /Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.netflix.experimental.duration = 67.604 s
Result: 26 findings, 0 parse errors
In experimental but not std 22 findings :
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/static/app/angular/certificates/certificate/tracking.tpl.html",
    "start": {
        "line": 117,
        "col": 49
    },
    "end": {
        "line": 117,
        "col": 113
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "               The selected authority uses the <a target=\"_blank\" href=\"https://letsencrypt.org/how-it-works/\">ACME protocol</a> and works differently than other authorities."
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 91,
        "col": 74
    },
    "end": {
        "line": 91,
        "col": 170
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 145,
        "col": 74
    },
    "end": {
        "line": 145,
        "col": 155
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/endpoints/{{ endpoint.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 118,
        "col": 74
    },
    "end": {
        "line": 118,
        "col": 170
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/issued.html",
    "start": {
        "line": 96,
        "col": 74
    },
    "end": {
        "line": 96,
        "col": 157
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ message.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration_summary.html",
    "start": {
        "line": 114,
        "col": 78
    },
    "end": {
        "line": 114,
        "col": 165
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                            <a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration.html",
    "start": {
        "line": 94,
        "col": 74
    },
    "end": {
        "line": 94,
        "col": 161
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/authority_expiration.html",
    "start": {
        "line": 102,
        "col": 74
    },
    "end": {
        "line": 102,
        "col": 161
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/static/app/angular/certificates/view/view.tpl.html",
    "start": {
        "line": 97,
        "col": 36
    },
    "end": {
        "line": 97,
        "col": 153
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                        <div>Hex: <a href=\"https://crt.sh/?serial={{ certificate.serialHex }}\" rel=\"noreferrer\" target=\"_blank\" title=\"View on crt.sh\">{{ certificate.serialHex }}</a></div>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/static/app/angular/certificates/certificate/tracking.tpl.html",
    "start": {
        "line": 117,
        "col": 49
    },
    "end": {
        "line": 117,
        "col": 113
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "               The selected authority uses the <a target=\"_blank\" href=\"https://letsencrypt.org/how-it-works/\">ACME protocol</a> and works differently than other authorities."
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 91,
        "col": 74
    },
    "end": {
        "line": 91,
        "col": 170
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 145,
        "col": 74
    },
    "end": {
        "line": 145,
        "col": 155
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/endpoints/{{ endpoint.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 118,
        "col": 74
    },
    "end": {
        "line": 118,
        "col": 170
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/issued.html",
    "start": {
        "line": 96,
        "col": 74
    },
    "end": {
        "line": 96,
        "col": 157
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ message.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration_summary.html",
    "start": {
        "line": 114,
        "col": 78
    },
    "end": {
        "line": 114,
        "col": 165
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                            <a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration.html",
    "start": {
        "line": 94,
        "col": 74
    },
    "end": {
        "line": 94,
        "col": 161
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/authority_expiration.html",
    "start": {
        "line": 102,
        "col": 74
    },
    "end": {
        "line": 102,
        "col": 161
    },
    "extra": {
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metavars": {},
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "                                                                        <a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>"
    }
}
{
    "check_id": "input.rules.generic.nginx.security.missing-internal.missing-internal",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/nginx/default.conf",
    "start": {
        "line": 11,
        "col": 10
    },
    "end": {
        "line": 11,
        "col": 44
    },
    "extra": {
        "message": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.",
        "metavars": {},
        "metadata": {
            "references": [
                "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md",
                "https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "        proxy_pass  http://127.0.0.1:8000;"
    }
}
{
    "check_id": "input.rules.generic.nginx.security.missing-internal.missing-internal",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/nginx/default-ssl.conf",
    "start": {
        "line": 22,
        "col": 10
    },
    "end": {
        "line": 22,
        "col": 44
    },
    "extra": {
        "message": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.",
        "metavars": {},
        "metadata": {
            "references": [
                "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md",
                "https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "        proxy_pass  http://127.0.0.1:8000;"
    }
}
{
    "check_id": "input.rules.generic.nginx.security.insecure-ssl-version.insecure-ssl-version",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/nginx/default-ssl.conf",
    "start": {
        "line": 18,
        "col": 5
    },
    "end": {
        "line": 18,
        "col": 41
    },
    "extra": {
        "message": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.",
        "metavars": {},
        "metadata": {
            "references": [
                "https://www.acunetix.com/blog/web-security-zone/hardening-nginx/",
                "https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;"
    }
}
{
    "check_id": "input.rules.generic.dockerfile.security.last-user-is-root.last-user-is-root",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/Dockerfile-src",
    "start": {
        "line": 63,
        "col": 2
    },
    "end": {
        "line": 63,
        "col": 11
    },
    "extra": {
        "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.",
        "metavars": {
            "$ROOT": {
                "start": {
                    "line": 63,
                    "col": 7,
                    "offset": 1751
                },
                "end": {
                    "line": 63,
                    "col": 11,
                    "offset": 1755
                },
                "abstract_content": "root",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "76073e525d999f2b375654e01ebaad1a"
                }
            }
        },
        "metadata": {
            "source-rule-url": "https://github.com/hadolint/hadolint/wiki/DL3002",
            "references": [
                "https://github.com/hadolint/hadolint/wiki/DL3002"
            ]
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "USER root"
    }
}
{
    "check_id": "input.rules.generic.dockerfile.security.last-user-is-root.last-user-is-root",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/Dockerfile",
    "start": {
        "line": 65,
        "col": 2
    },
    "end": {
        "line": 65,
        "col": 11
    },
    "extra": {
        "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.",
        "metavars": {
            "$ROOT": {
                "start": {
                    "line": 65,
                    "col": 7,
                    "offset": 2005
                },
                "end": {
                    "line": 65,
                    "col": 11,
                    "offset": 2009
                },
                "abstract_content": "root",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "76073e525d999f2b375654e01ebaad1a"
                }
            }
        },
        "metadata": {
            "source-rule-url": "https://github.com/hadolint/hadolint/wiki/DL3002",
            "references": [
                "https://github.com/hadolint/hadolint/wiki/DL3002"
            ]
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "USER root"
    }
}
In std but not experimental 22 findings :
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/static/app/angular/certificates/certificate/tracking.tpl.html",
    "start": {
        "line": 117,
        "col": 48
    },
    "end": {
        "line": 117,
        "col": 112
    },
    "extra": {
        "metavars": {},
        "lines": "The selected authority uses the <a target=\"_blank\" href=\"https://letsencrypt.org/how-it-works/\">ACME protocol</a> and works differently than other authorities.",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 91,
        "col": 73
    },
    "end": {
        "line": 91,
        "col": 169
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 145,
        "col": 73
    },
    "end": {
        "line": 145,
        "col": 154
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/endpoints/{{ endpoint.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 118,
        "col": 73
    },
    "end": {
        "line": 118,
        "col": 169
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/issued.html",
    "start": {
        "line": 96,
        "col": 73
    },
    "end": {
        "line": 96,
        "col": 156
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ message.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration_summary.html",
    "start": {
        "line": 114,
        "col": 77
    },
    "end": {
        "line": 114,
        "col": 164
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration.html",
    "start": {
        "line": 94,
        "col": 73
    },
    "end": {
        "line": 94,
        "col": 160
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noreferrer.missing-noreferrer",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/authority_expiration.html",
    "start": {
        "line": 102,
        "col": 73
    },
    "end": {
        "line": 102,
        "col": 160
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/static/app/angular/certificates/view/view.tpl.html",
    "start": {
        "line": 97,
        "col": 35
    },
    "end": {
        "line": 97,
        "col": 152
    },
    "extra": {
        "metavars": {},
        "lines": "<div>Hex: <a href=\"https://crt.sh/?serial={{ certificate.serialHex }}\" rel=\"noreferrer\" target=\"_blank\" title=\"View on crt.sh\">{{ certificate.serialHex }}</a></div>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/static/app/angular/certificates/certificate/tracking.tpl.html",
    "start": {
        "line": 117,
        "col": 48
    },
    "end": {
        "line": 117,
        "col": 112
    },
    "extra": {
        "metavars": {},
        "lines": "The selected authority uses the <a target=\"_blank\" href=\"https://letsencrypt.org/how-it-works/\">ACME protocol</a> and works differently than other authorities.",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 91,
        "col": 73
    },
    "end": {
        "line": 91,
        "col": 169
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 145,
        "col": 73
    },
    "end": {
        "line": 145,
        "col": 154
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/endpoints/{{ endpoint.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/rotation.html",
    "start": {
        "line": 118,
        "col": 73
    },
    "end": {
        "line": 118,
        "col": 169
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ message.certificates.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/issued.html",
    "start": {
        "line": 96,
        "col": 73
    },
    "end": {
        "line": 96,
        "col": 156
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ message.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration_summary.html",
    "start": {
        "line": 114,
        "col": 77
    },
    "end": {
        "line": 114,
        "col": 164
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/expiration.html",
    "start": {
        "line": 94,
        "col": 73
    },
    "end": {
        "line": 94,
        "col": 160
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.html.security.missing-noopener.missing-noopener",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/lemur/plugins/lemur_email/templates/authority_expiration.html",
    "start": {
        "line": 102,
        "col": 73
    },
    "end": {
        "line": 102,
        "col": 160
    },
    "extra": {
        "metavars": {},
        "lines": "<a href=\"https://{{ hostname }}/#/certificates/{{ certificate.name }}\" target=\"_blank\">Details</a>",
        "message": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag",
        "metadata": {},
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.nginx.security.missing-internal.missing-internal",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/nginx/default.conf",
    "start": {
        "line": 11,
        "col": 9
    },
    "end": {
        "line": 11,
        "col": 43
    },
    "extra": {
        "metavars": {},
        "lines": "proxy_pass  http://127.0.0.1:8000;",
        "message": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.",
        "metadata": {
            "references": [
                "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md",
                "https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.nginx.security.missing-internal.missing-internal",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/nginx/default-ssl.conf",
    "start": {
        "line": 22,
        "col": 9
    },
    "end": {
        "line": 22,
        "col": 43
    },
    "extra": {
        "metavars": {},
        "lines": "proxy_pass  http://127.0.0.1:8000;",
        "message": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.",
        "metadata": {
            "references": [
                "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md",
                "https://nginx.org/en/docs/http/ngx_http_core_module.html#internal"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.nginx.security.insecure-ssl-version.insecure-ssl-version",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/nginx/default-ssl.conf",
    "start": {
        "line": 18,
        "col": 4
    },
    "end": {
        "line": 18,
        "col": 40
    },
    "extra": {
        "metavars": {},
        "lines": "ssl_protocols TLSv1 TLSv1.1 TLSv1.2;",
        "message": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.",
        "metadata": {
            "references": [
                "https://www.acunetix.com/blog/web-security-zone/hardening-nginx/",
                "https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.dockerfile.security.last-user-is-root.last-user-is-root",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/Dockerfile-src",
    "start": {
        "line": 63,
        "col": 1
    },
    "end": {
        "line": 63,
        "col": 10
    },
    "extra": {
        "metavars": {
            "$ROOT": {
                "start": {
                    "line": 63,
                    "col": 6,
                    "offset": 1751
                },
                "end": {
                    "line": 63,
                    "col": 10,
                    "offset": 1755
                },
                "abstract_content": "root",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "63a9f0ea7bb98050796b649e85481845"
                }
            }
        },
        "lines": "USER root",
        "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.",
        "metadata": {
            "source-rule-url": "https://github.com/hadolint/hadolint/wiki/DL3002",
            "references": [
                "https://github.com/hadolint/hadolint/wiki/DL3002"
            ]
        },
        "severity": "ERROR",
        "is_ignored": false
    }
}Reusing repo 'sysdig-inspect'

{
    "check_id": "input.rules.generic.dockerfile.security.last-user-is-root.last-user-is-root",
    "path": "/Users/emma/workspace/semgrep/perf/bench/netflix/input/lemur/docker/Dockerfile",
    "start": {
        "line": 65,
        "col": 1
    },
    "end": {
        "line": 65,
        "col": 10
    },
    "extra": {
        "metavars": {
            "$ROOT": {
                "start": {
                    "line": 65,
                    "col": 6,
                    "offset": 2005
                },
                "end": {
                    "line": 65,
                    "col": 10,
                    "offset": 2009
                },
                "abstract_content": "root",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "63a9f0ea7bb98050796b649e85481845"
                }
            }
        },
        "lines": "USER root",
        "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.",
        "metadata": {
            "source-rule-url": "https://github.com/hadolint/hadolint/wiki/DL3002",
            "references": [
                "https://github.com/hadolint/hadolint/wiki/DL3002"
            ]
        },
        "severity": "ERROR",
        "is_ignored": false
    }
}
------ semgrep.bench.draios.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.draios.std.duration = 47.539 s
Result: 32 findings, 0 parse errors
------ semgrep.bench.draios.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.draios.no-cache.duration = 47.706 s
Result: 32 findings, 0 parse errors
------ semgrep.bench.draios.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.draios.max-cache.duration = 47.844 s
Result: 32 findings, 0 parse errors
------ semgrep.bench.draios.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.draios.no-bloom.duration = 48.192 s
Result: 32 findings, 0 parse errors
------ semgrep.bench.draios.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.draios.no-gc-tuning.duration = 48.925 s
Result: 32 findings, 0 parse errors
------ semgrep.bench.draios.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.draios.set_filters.duration = 47.144 s
Result: 32 findings, 0 parse errors
------ semgrep.bench.draios.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/draios
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/draios/input/rules /Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.draios.experimental.duration = 53.680 s
Result: 32 findings, 0 parse errors
In experimental but not std 32 findings :
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 28,
        "col": 19
    },
    "end": {
        "line": 28,
        "col": 30
    },
    "extra": {
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "    <script src=\"{{rootURL}}assets/tests.js\"></script>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 27,
        "col": 19
    },
    "end": {
        "line": 27,
        "col": 30
    },
    "extra": {
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "    <script src=\"{{rootURL}}assets/sysdig-inspect.js\"></script>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 26,
        "col": 19
    },
    "end": {
        "line": 26,
        "col": 30
    },
    "extra": {
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "    <script src=\"{{rootURL}}assets/test-support.js\"></script>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 25,
        "col": 19
    },
    "end": {
        "line": 25,
        "col": 30
    },
    "extra": {
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "    <script src=\"{{rootURL}}assets/vendor.js\"></script>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/app/index.html",
    "start": {
        "line": 40,
        "col": 19
    },
    "end": {
        "line": 40,
        "col": 30
    },
    "extra": {
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "    <script src=\"{{rootURL}}assets/sysdig-inspect.js\"></script>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/app/index.html",
    "start": {
        "line": 39,
        "col": 19
    },
    "end": {
        "line": 39,
        "col": 30
    },
    "extra": {
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false,
        "lines": "    <script src=\"{{rootURL}}assets/vendor.js\"></script>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-timelines.hbs",
    "start": {
        "line": 73,
        "col": 62
    },
    "end": {
        "line": 73,
        "col": 99
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "            <div class=\"wsd-metric-timelines__marker\" style={{timelineConfiguration.markerStyle}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-timelines.hbs",
    "start": {
        "line": 39,
        "col": 65
    },
    "end": {
        "line": 39,
        "col": 81
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        <div class=\"wsd-metric-timelines__overlay-chart\" style={{overlayStyle}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-timelines.hbs",
    "start": {
        "line": 109,
        "col": 63
    },
    "end": {
        "line": 109,
        "col": 134
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "            <div class=\"wsd-metric-timelines__control-button {{if isMouseOver \"\" \"wsd-metric-timelines__control-button--is-hidden\"}}\">"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-tile.hbs",
    "start": {
        "line": 54,
        "col": 46
    },
    "end": {
        "line": 54,
        "col": 62
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "<div class=\"wsd-metric-tile__overlay\" style={{overlayStyle}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-header.hbs",
    "start": {
        "line": 20,
        "col": 41
    },
    "end": {
        "line": 20,
        "col": 69
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "<div class=\"wsd-capture-header__title\" {{action \"openFileBrowser\"}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-data-dig.hbs",
    "start": {
        "line": 21,
        "col": 56
    },
    "end": {
        "line": 21,
        "col": 132
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                <div class=\"wsd-capture-data-dig__row {{if row.isNotSearchMatch \"wsd-capture-data-dig__row--is-not-search-match\"}}\">{{sd-tokenized-output output=row.data isPre=true}}</div>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 46,
        "col": 83
    },
    "end": {
        "line": 46,
        "col": 103
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                    <div class=\"wsd-capture-breadcrumbs__step-description\" title={{item.description}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 26,
        "col": 18
    },
    "end": {
        "line": 26,
        "col": 45
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                {{action select item.step}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 25,
        "col": 22
    },
    "end": {
        "line": 25,
        "col": 98
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                    {{if item.hasDescription \"wsd-capture-breadcrumbs__step--with-description\"}}\""
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 24,
        "col": 22
    },
    "end": {
        "line": 24,
        "col": 89
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                    {{if item.isSelected \"wsd-capture-breadcrumbs__step--is-selected\"}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 23,
        "col": 22
    },
    "end": {
        "line": 23,
        "col": 81
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                    {{if item.isHome \"wsd-capture-breadcrumbs__step--is-home\"}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 22,
        "col": 22
    },
    "end": {
        "line": 22,
        "col": 76
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "                    {{if isRoot \"wsd-capture-breadcrumbs__step--is-root\"}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 50,
        "col": 49
    },
    "end": {
        "line": 50,
        "col": 67
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "<div class=\"sd-viz-timeline__right-area\" style={{rightAreaStyle}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 43,
        "col": 10
    },
    "end": {
        "line": 43,
        "col": 110
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        {{if isTimeLabelInternal \"sd-viz-timeline__time--is-internal\" \"sd-viz-timeline__time--is-external\"}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 36,
        "col": 10
    },
    "end": {
        "line": 36,
        "col": 77
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        {{if isTimeDiffLabelOnTop \"sd-viz-timeline__time-diff--is-on-top\"}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 29,
        "col": 10
    },
    "end": {
        "line": 29,
        "col": 110
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        {{if isTimeLabelInternal \"sd-viz-timeline__time--is-internal\" \"sd-viz-timeline__time--is-external\"}}"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 23,
        "col": 48
    },
    "end": {
        "line": 23,
        "col": 65
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "<div class=\"sd-viz-timeline__left-area\" style={{leftAreaStyle}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 20,
        "col": 55
    },
    "end": {
        "line": 20,
        "col": 75
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "    <div class=\"sd-viz-timeline__hover-marker\" style={{hoverMarkerStyle}}></div>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 26,
        "col": 54
    },
    "end": {
        "line": 26,
        "col": 113
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "            <span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 26,
        "col": 114
    },
    "end": {
        "line": 26,
        "col": 190
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "            <span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 21,
        "col": 95
    },
    "end": {
        "line": 21,
        "col": 154
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        <pre>{{#each output key=\"@index\" as |token|}}<span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">{{token.output}}</span>{{/each}}</pre>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 21,
        "col": 155
    },
    "end": {
        "line": 21,
        "col": 231
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        <pre>{{#each output key=\"@index\" as |token|}}<span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">{{token.output}}</span>{{/each}}</pre>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-table.hbs",
    "start": {
        "line": 18,
        "col": 40
    },
    "end": {
        "line": 18,
        "col": 58
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "    <div class=\"sd-table__wrap\" style={{tableWrapStyle}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-list.hbs",
    "start": {
        "line": 19,
        "col": 89
    },
    "end": {
        "line": 19,
        "col": 116
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        <div class=\"sd-list__item {{if item.isSelected \"sd-list__item--is-selected\"}}\" {{action select item.data}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-list.hbs",
    "start": {
        "line": 19,
        "col": 36
    },
    "end": {
        "line": 19,
        "col": 87
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "        <div class=\"sd-list__item {{if item.isSelected \"sd-list__item--is-selected\"}}\" {{action select item.data}}>"
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-input.hbs",
    "start": {
        "line": 29,
        "col": 33
    },
    "end": {
        "line": 29,
        "col": 89
    },
    "extra": {
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metavars": {},
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false,
        "lines": "    <div class=\"sd-input__icon {{if isChangeFeedbackVisible \"sd-input__icon--visible\"}}\">"
    }
}
In std but not experimental 32 findings :
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 28,
        "col": 18
    },
    "end": {
        "line": 28,
        "col": 29
    },
    "extra": {
        "metavars": {},
        "lines": "<script src=\"{{rootURL}}assets/tests.js\"></script>",
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 27,
        "col": 18
    },
    "end": {
        "line": 27,
        "col": 29
    },
    "extra": {
        "metavars": {},
        "lines": "<script src=\"{{rootURL}}assets/sysdig-inspect.js\"></script>",
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 26,
        "col": 18
    },
    "end": {
        "line": 26,
        "col": 29
    },
    "extra": {
        "metavars": {},
        "lines": "<script src=\"{{rootURL}}assets/test-support.js\"></script>",
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/tests/index.html",
    "start": {
        "line": 25,
        "col": 18
    },
    "end": {
        "line": 25,
        "col": 29
    },
    "extra": {
        "metavars": {},
        "lines": "<script src=\"{{rootURL}}assets/vendor.js\"></script>",
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/app/index.html",
    "start": {
        "line": 40,
        "col": 18
    },
    "end": {
        "line": 40,
        "col": 29
    },
    "extra": {
        "metavars": {},
        "lines": "<script src=\"{{rootURL}}assets/sysdig-inspect.js\"></script>",
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.var-in-script-tag.var-in-script-tag",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/app/index.html",
    "start": {
        "line": 39,
        "col": 18
    },
    "end": {
        "line": 39,
        "col": 29
    },
    "extra": {
        "metavars": {},
        "lines": "<script src=\"{{rootURL}}assets/vendor.js\"></script>",
        "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A",
                "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough",
                "https://github.com/ESAPI/owasp-esapi-js"
            ]
        },
        "severity": "WARNING",
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-timelines.hbs",
    "start": {
        "line": 73,
        "col": 61
    },
    "end": {
        "line": 73,
        "col": 98
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-metric-timelines__marker\" style={{timelineConfiguration.markerStyle}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-timelines.hbs",
    "start": {
        "line": 39,
        "col": 64
    },
    "end": {
        "line": 39,
        "col": 80
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-metric-timelines__overlay-chart\" style={{overlayStyle}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-timelines.hbs",
    "start": {
        "line": 109,
        "col": 62
    },
    "end": {
        "line": 109,
        "col": 133
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-metric-timelines__control-button {{if isMouseOver \"\" \"wsd-metric-timelines__control-button--is-hidden\"}}\">",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-metric-tile.hbs",
    "start": {
        "line": 54,
        "col": 45
    },
    "end": {
        "line": 54,
        "col": 61
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-metric-tile__overlay\" style={{overlayStyle}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-header.hbs",
    "start": {
        "line": 20,
        "col": 40
    },
    "end": {
        "line": 20,
        "col": 68
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-capture-header__title\" {{action \"openFileBrowser\"}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-data-dig.hbs",
    "start": {
        "line": 21,
        "col": 55
    },
    "end": {
        "line": 21,
        "col": 131
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-capture-data-dig__row {{if row.isNotSearchMatch \"wsd-capture-data-dig__row--is-not-search-match\"}}\">{{sd-tokenized-output output=row.data isPre=true}}</div>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 46,
        "col": 82
    },
    "end": {
        "line": 46,
        "col": 102
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"wsd-capture-breadcrumbs__step-description\" title={{item.description}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 26,
        "col": 17
    },
    "end": {
        "line": 26,
        "col": 44
    },
    "extra": {
        "metavars": {},
        "lines": "{{action select item.step}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 25,
        "col": 21
    },
    "end": {
        "line": 25,
        "col": 97
    },
    "extra": {
        "metavars": {},
        "lines": "{{if item.hasDescription \"wsd-capture-breadcrumbs__step--with-description\"}}\"",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 24,
        "col": 21
    },
    "end": {
        "line": 24,
        "col": 88
    },
    "extra": {
        "metavars": {},
        "lines": "{{if item.isSelected \"wsd-capture-breadcrumbs__step--is-selected\"}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 23,
        "col": 21
    },
    "end": {
        "line": 23,
        "col": 80
    },
    "extra": {
        "metavars": {},
        "lines": "{{if item.isHome \"wsd-capture-breadcrumbs__step--is-home\"}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/wsd-core/addon/templates/components/wsd-capture-breadcrumbs.hbs",
    "start": {
        "line": 22,
        "col": 21
    },
    "end": {
        "line": 22,
        "col": 75
    },
    "extra": {
        "metavars": {},
        "lines": "{{if isRoot \"wsd-capture-breadcrumbs__step--is-root\"}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 50,
        "col": 48
    },
    "end": {
        "line": 50,
        "col": 66
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-viz-timeline__right-area\" style={{rightAreaStyle}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 43,
        "col": 9
    },
    "end": {
        "line": 43,
        "col": 109
    },
    "extra": {
        "metavars": {},
        "lines": "{{if isTimeLabelInternal \"sd-viz-timeline__time--is-internal\" \"sd-viz-timeline__time--is-external\"}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 36,
        "col": 9
    },
    "end": {
        "line": 36,
        "col": 76
    },
    "extra": {
        "metavars": {},
        "lines": "{{if isTimeDiffLabelOnTop \"sd-viz-timeline__time-diff--is-on-top\"}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 29,
        "col": 9
    },
    "end": {
        "line": 29,
        "col": 109
    },
    "extra": {
        "metavars": {},
        "lines": "{{if isTimeLabelInternal \"sd-viz-timeline__time--is-internal\" \"sd-viz-timeline__time--is-external\"}}",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 23,
        "col": 47
    },
    "end": {
        "line": 23,
        "col": 64
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-viz-timeline__left-area\" style={{leftAreaStyle}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-viz-timeline.hbs",
    "start": {
        "line": 20,
        "col": 54
    },
    "end": {
        "line": 20,
        "col": 74
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-viz-timeline__hover-marker\" style={{hoverMarkerStyle}}></div>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 26,
        "col": 53
    },
    "end": {
        "line": 26,
        "col": 112
    },
    "extra": {
        "metavars": {},
        "lines": "<span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 26,
        "col": 113
    },
    "end": {
        "line": 26,
        "col": 189
    },
    "extra": {
        "metavars": {},
        "lines": "<span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 21,
        "col": 94
    },
    "end": {
        "line": 21,
        "col": 153
    },
    "extra": {
        "metavars": {},
        "lines": "<pre>{{#each output key=\"@index\" as |token|}}<span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">{{token.output}}</span>{{/each}}</pre>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-tokenized-output.hbs",
    "start": {
        "line": 21,
        "col": 154
    },
    "end": {
        "line": 21,
        "col": 230
    },
    "extra": {
        "metavars": {},
        "lines": "<pre>{{#each output key=\"@index\" as |token|}}<span class=\"sd-tokenized-output__token {{if token.isMatch \"sd-tokenized-output__token--is-match\"}} {{if token.isMatchSelected \"sd-tokenized-output__token--is-match-selected\"}}\">{{token.output}}</span>{{/each}}</pre>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-table.hbs",
    "start": {
        "line": 18,
        "col": 39
    },
    "end": {
        "line": 18,
        "col": 57
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-table__wrap\" style={{tableWrapStyle}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}Reusing repo 'govwa'
Reusing repo 'rails'

{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-list.hbs",
    "start": {
        "line": 19,
        "col": 88
    },
    "end": {
        "line": 19,
        "col": 115
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-list__item {{if item.isSelected \"sd-list__item--is-selected\"}}\" {{action select item.data}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-list.hbs",
    "start": {
        "line": 19,
        "col": 35
    },
    "end": {
        "line": 19,
        "col": 86
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-list__item {{if item.isSelected \"sd-list__item--is-selected\"}}\" {{action select item.data}}>",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
{
    "check_id": "input.rules.generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
    "path": "/Users/emma/workspace/semgrep/perf/bench/draios/input/sysdig-inspect/lib/ui-toolkit/addon/templates/components/sd-input.hbs",
    "start": {
        "line": 29,
        "col": 32
    },
    "end": {
        "line": 29,
        "col": 88
    },
    "extra": {
        "metavars": {},
        "lines": "<div class=\"sd-input__icon {{if isChangeFeedbackVisible \"sd-input__icon--visible\"}}\">",
        "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".",
        "metadata": {
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "owasp": "A7: Cross-site Scripting (XSS)",
            "references": [
                "https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"
            ]
        },
        "severity": "WARNING",
        "fix_regex": {
            "regex": "{{(.*?)}}",
            "replacement": "\"{{\\1}}\""
        },
        "is_ignored": false
    }
}
------ semgrep.bench.0c34.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.0c34.std.duration = 2.641 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.0c34.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.0c34.no-cache.duration = 2.650 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.0c34.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.0c34.max-cache.duration = 2.609 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.0c34.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.0c34.no-bloom.duration = 2.622 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.0c34.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.0c34.no-gc-tuning.duration = 2.629 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.0c34.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.0c34.set_filters.duration = 2.602 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.0c34.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/0c34
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/0c34/input/golang.yml /Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.0c34.experimental.duration = 2.762 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.rails.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.rails.std.duration = 33.160 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.rails.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.rails.no-cache.duration = 32.568 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.rails.max-cache ------Reusing repo 'lodash'
Reusing repo 'Vulnerable-Flask-App'

current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.rails.max-cache.duration = 32.739 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.rails.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.rails.no-bloom.duration = 30.107 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.rails.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.rails.no-gc-tuning.duration = 30.582 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.rails.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.rails.set_filters.duration = 27.315 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.rails.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/rails
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/rails/input/ruby.yml /Users/emma/workspace/semgrep/perf/bench/rails/input/rails --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.rails.experimental.duration = 24.212 s
Result: 751 findings, 0 parse errors
------ semgrep.bench.lodash.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.lodash.std.duration = 6.662 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.lodash.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.lodash.no-cache.duration = 6.400 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.lodash.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.lodash.max-cache.duration = 6.526 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.lodash.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.lodash.no-bloom.duration = 6.305 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.lodash.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.lodash.no-gc-tuning.duration = 6.757 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.lodash.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.lodash.set_filters.duration = 6.152 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.lodash.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/lodash
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/lodash/input/rules /Users/emma/workspace/semgrep/perf/bench/lodash/input/lodash --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.lodash.experimental.duration = 7.544 s
Result: 3 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.std.duration = 26.483 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.no-cache.duration = 26.341 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.max-cache.duration = 26.540 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.no-bloom.duration = 27.052 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-AppReusing repo 'DVWA'

semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.no-gc-tuning.duration = 27.493 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.set_filters.duration = 26.343 s
Result: 8 findings, 0 parse errors
------ semgrep.bench.Vulnerable-Flask-App.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/rules /Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.Vulnerable-Flask-App.experimental.duration = 35.875 s
Result: 10 findings, 0 parse errors
In experimental but not std 2 findings :
{
    "check_id": "input.rules.python.flask.security.dangerous-template-string.dangerous-template-string",
    "path": "/Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App/app/app.py",
    "start": {
        "line": 271,
        "col": 21
    },
    "end": {
        "line": 281,
        "col": 100
    },
    "extra": {
        "message": "Found a template created with string formatting.\nThis is susceptible to server-side template injection\nand cross-site scripting attacks.\n",
        "metavars": {
            "$MORE": {
                "start": {
                    "line": 281,
                    "col": 97,
                    "offset": 10409
                },
                "end": {
                    "line": 281,
                    "col": 100,
                    "offset": 10412
                },
                "abstract_content": "404",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "001cb3fe6834ac7f36cf24e2a27574fc"
                }
            },
            "$S": {
                "start": {
                    "line": 280,
                    "col": 31,
                    "offset": 10306
                },
                "end": {
                    "line": 280,
                    "col": 37,
                    "offset": 10312
                },
                "abstract_content": "str(e)",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "3e98b439c45b68c1e9abf9a38c200a8a"
                }
            },
            "$V": {
                "start": {
                    "line": 271,
                    "col": 21,
                    "offset": 9963
                },
                "end": {
                    "line": 271,
                    "col": 29,
                    "offset": 9971
                },
                "abstract_content": "template",
                "unique_id": {
                    "type": "id",
                    "value": "template",
                    "kind": "Local",
                    "sid": 82
                }
            }
        },
        "metadata": {
            "cwe": "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
            "owasp": "A1: Injection",
            "references": [
                "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html",
                "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"
            ]
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "                    template = '''<html>\n                        <head>\n                        <title>Error</title>\n                        </head>\n                        <body>\n                        <h1>Oops Error Occurred</h1>\n                        <h3>%s</h3>\n                        </body>\n                        </html>\n                        ''' % str(e)\n                    return render_template_string(template, dir=dir, help=help, locals=locals), 404"
    }
}
{
    "check_id": "input.rules.python.flask.security.dangerous-template-string.dangerous-template-string",
    "path": "/Users/emma/workspace/semgrep/perf/bench/Vulnerable-Flask-App/input/Vulnerable-Flask-App/app/app.py",
    "start": {
        "line": 103,
        "col": 5
    },
    "end": {
        "line": 114,
        "col": 89
    },
    "extra": {
        "message": "Found a template created with string formatting.\nThis is susceptible to server-side template injection\nand cross-site scripting attacks.\n",
        "metavars": {
            "$MORE": {
                "start": {
                    "line": 114,
                    "col": 86,
                    "offset": 3388
                },
                "end": {
                    "line": 114,
                    "col": 89,
                    "offset": 3391
                },
                "abstract_content": "404",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "001cb3fe6834ac7f36cf24e2a27574fc"
                }
            },
            "$S": {
                "start": {
                    "line": 112,
                    "col": 11,
                    "offset": 3290
                },
                "end": {
                    "line": 112,
                    "col": 22,
                    "offset": 3301
                },
                "abstract_content": "request.url",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "bd5bfe39d37aae65afcc8e3f17f2118b"
                }
            },
            "$V": {
                "start": {
                    "line": 103,
                    "col": 5,
                    "offset": 3116
                },
                "end": {
                    "line": 103,
                    "col": 13,
                    "offset": 3124
                },
                "abstract_content": "template",
                "unique_id": {
                    "type": "id",
                    "value": "template",
                    "kind": "Local",
                    "sid": 35
                }
            }
        },
        "metadata": {
            "cwe": "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
            "owasp": "A1: Injection",
            "references": [
                "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html",
                "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"
            ]
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "    template = '''<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ''' % request.url\n\n    return render_template_string(template, dir = dir, help = help, locals = locals),404"
    }
}
In std but not experimental 0 findings :
------ semgrep.bench.DVWA.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 0
success
semgrep.bench.DVWA.std.duration = 13.402 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.DVWA.no-cache ------Reusing repo 'juice-shop'

current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 0
success
semgrep.bench.DVWA.no-cache.duration = 13.475 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.DVWA.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 0
success
semgrep.bench.DVWA.max-cache.duration = 13.466 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.DVWA.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 0
success
semgrep.bench.DVWA.no-bloom.duration = 13.736 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.DVWA.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 0
success
semgrep.bench.DVWA.no-gc-tuning.duration = 13.688 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.DVWA.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 0
success
semgrep.bench.DVWA.set_filters.duration = 13.050 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.DVWA.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/DVWA
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/DVWA/input/rules /Users/emma/workspace/semgrep/perf/bench/DVWA/input/DVWA --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 0
success
semgrep.bench.DVWA.experimental.duration = 23.316 s
Result: 0 findings, 0 parse errors
------ semgrep.bench.juice-shop.std ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: ''
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.std.duration = 25.219 s
Result: 3 findings, 2 parse errors
------ semgrep.bench.juice-shop.no-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_opt_cache'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.no-cache.duration = 25.170 s
Result: 3 findings, 2 parse errors
In no-cache but not std 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "6994b537a4ac7493f7210aae2bc47886"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
In std but not no-cache 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "61bcce0c4f255e835dd50fcaa32bf0a8"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
------ semgrep.bench.juice-shop.max-cache ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-opt_max_cache'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.max-cache.duration = 25.063 s
Result: 3 findings, 2 parse errors
In max-cache but not std 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "cd48abcde7e13e93ce7525fd4b5e7026"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
In std but not max-cache 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "61bcce0c4f255e835dd50fcaa32bf0a8"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
------ semgrep.bench.juice-shop.no-bloom ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_bloom_filter'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.no-bloom.duration = 27.596 s
Result: 3 findings, 2 parse errors
In no-bloom but not std 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "f9a210c56a0390bda068a7cc449fc476"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
In std but not no-bloom 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "61bcce0c4f255e835dd50fcaa32bf0a8"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
------ semgrep.bench.juice-shop.no-gc-tuning ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-no_gc_tuning'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.no-gc-tuning.duration = 27.597 s
Result: 3 findings, 2 parse errors
In no-gc-tuning but not std 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "791add7352e8cb794c112550b4f45118"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
In std but not no-gc-tuning 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "61bcce0c4f255e835dd50fcaa32bf0a8"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
------ semgrep.bench.juice-shop.set_filters ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore
extra arguments for semgrep-core: '-set_filter'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.set_filters.duration = 23.294 s
Result: 3 findings, 2 parse errors
In set_filters but not std 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "514a7087cef51f27ec017666123d319f"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
In std but not set_filters 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "61bcce0c4f255e835dd50fcaa32bf0a8"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
------ semgrep.bench.juice-shop.experimental ------
current directory: /Users/emma/workspace/semgrep/perf/bench/juice-shop
semgrep command: semgrep --config /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/rules /Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop --strict --json --timeout 0 --verbose --no-git-ignore --experimental
extra arguments for semgrep-core: '-fast'
semgrep exit status: 3
warning: some files couldn't be parsed
semgrep.bench.juice-shop.experimental.duration = 30.346 s
Result: 5 findings, 2 parse errors
In experimental but not std 3 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "11074d5cdfa5045b0e24947258c608ad"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "11074d5cdfa5045b0e24947258c608ad"
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/lib/insecurity.js",
    "start": {
        "line": 9,
        "col": 1
    },
    "end": {
        "line": 34,
        "col": 112
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 34,
                    "col": 45,
                    "offset": 1977
                },
                "end": {
                    "line": 34,
                    "col": 49,
                    "offset": 1981
                },
                "abstract_content": "user",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "fabb743c16684286fd31bd23ccdb7809"
                }
            },
            "$SECRET": {
                "start": {
                    "line": 19,
                    "col": 7,
                    "offset": 544
                },
                "end": {
                    "line": 19,
                    "col": 17,
                    "offset": 554
                },
                "abstract_content": "privateKey",
                "unique_id": {
                    "type": "id",
                    "value": "privateKey",
                    "kind": "Global",
                    "sid": 11
                }
            },
            "$JWT": {
                "start": {
                    "line": 9,
                    "col": 7,
                    "offset": 190
                },
                "end": {
                    "line": 9,
                    "col": 10,
                    "offset": 193
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 3
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\nconst jws = require('jws')\nconst sanitizeHtml = require('sanitize-html')\nconst sanitizeFilename = require('sanitize-filename')\nconst z85 = require('z85')\nconst utils = require('./utils')\nconst fs = require('fs')\n\nconst publicKey = fs.readFileSync('encryptionkeys/jwt.pub', 'utf8')\nmodule.exports.publicKey = publicKey\nconst privateKey = '-----BEGIN RSA PRIVATE KEY-----\\r\\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX43zO6Ko0TFEZx/65gY3BE0O6syCEmUP4qbSd6exou/F+WTISzbQ5FBVPVmhnYhG/kpwt/cIxK5iUn5hm+4tQIDAQABAoGBAI+8xiPoOrA+KMnG/T4jJsG6TsHQcDHvJi7o1IKC/hnIXha0atTX5AUkRRce95qSfvKFweXdJXSQ0JMGJyfuXgU6dI0TcseFRfewXAa/ssxAC+iUVR6KUMh1PE2wXLitfeI6JLvVtrBYswm2I7CtY0q8n5AGimHWVXJPLfGV7m0BAkEA+fqFt2LXbLtyg6wZyxMA/cnmt5Nt3U2dAu77MzFJvibANUNHE4HPLZxjGNXN+a6m0K6TD4kDdh5HfUYLWWRBYQJBANK3carmulBwqzcDBjsJ0YrIONBpCAsXxk8idXb8jL9aNIg15Wumm2enqqObahDHB5jnGOLmbasizvSVqypfM9UCQCQl8xIqy+YgURXzXCN+kwUgHinrutZms87Jyi+D8Br8NY0+Nlf+zHvXAomD2W5CsEK7C+8SLBr3k/TsnRWHJuECQHFE9RA2OP8WoaLPuGCyFXaxzICThSRZYluVnWkZtxsBhW2W8z1b8PvWUE7kMy7TnkzeJS2LSnaNHoyxi7IaPQUCQCwWU4U+v4lD7uYBw00Ga/xt+7+UqFPlPVdz1yyr4q24Zxaw0LgmuEvgU5dycq8N7JxjTubX0MIRR+G9fmDBBl8=\\r\\n-----END RSA PRIVATE KEY-----'\n\nexports.hash = data => crypto.createHash('md5').update(data).digest('hex')\nexports.hmac = data => crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj').update(data).digest('hex')\n\nexports.cutOffPoisonNullByte = str => {\n  const nullByte = '%00'\n  if (utils.contains(str, nullByte)) {\n    return str.substring(0, str.indexOf(nullByte))\n  }\n  return str\n}\n\nexports.isAuthorized = () => expressJwt({ secret: this.publicKey })\nexports.denyAll = () => expressJwt({ secret: '' + Math.random() })\nexports.authorize = (user = {}) => jwt.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: 'RS256' })"
    }
}
In std but not experimental 1 findings :
{
    "check_id": "input.rules.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
    "path": "/Users/emma/workspace/semgrep/perf/bench/juice-shop/input/juice-shop/test/api/2faSpec.js",
    "start": {
        "line": 12,
        "col": 1
    },
    "end": {
        "line": 156,
        "col": 3
    },
    "extra": {
        "message": "Hardcoded JWT secret or private key is used.\nThis is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html\nConsider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)\n",
        "metavars": {
            "$P": {
                "start": {
                    "line": 140,
                    "col": 40,
                    "offset": 3780
                },
                "end": {
                    "line": 143,
                    "col": 6,
                    "offset": 3860
                },
                "abstract_content": "{userId 10 type'password_valid_needs_second_factor_token'}",
                "unique_id": {
                    "type": "AST",
                    "md5sum": "61bcce0c4f255e835dd50fcaa32bf0a8"
                }
            },
            "$T": {
                "start": {
                    "line": 140,
                    "col": 11,
                    "offset": 3751
                },
                "end": {
                    "line": 140,
                    "col": 28,
                    "offset": 3768
                },
                "abstract_content": "tmpTokenWurstbrot",
                "unique_id": {
                    "type": "id",
                    "value": "tmpTokenWurstbrot",
                    "kind": "Local",
                    "sid": 21
                }
            },
            "$JWT": {
                "start": {
                    "line": 12,
                    "col": 7,
                    "offset": 265
                },
                "end": {
                    "line": 12,
                    "col": 10,
                    "offset": 268
                },
                "abstract_content": "jwt",
                "unique_id": {
                    "type": "id",
                    "value": "jwt",
                    "kind": "Global",
                    "sid": 6
                }
            }
        },
        "metadata": {
            "cwe": "CWE-522: Insufficiently Protected Credentials",
            "owasp": "A2: Broken Authentication",
            "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
        },
        "severity": "ERROR",
        "is_ignored": false,
        "lines": "const jwt = require('jsonwebtoken')\n\nconst REST_URL = 'http://localhost:3000/rest'\nconst API_URL = 'http://localhost:3000/api'\n\nconst jsonHeader = { 'content-type': 'application/json' }\n\nasync function login ({ email, password, totpSecret }) {\n  const loginRes = await frisby\n    .post(REST_URL + '/user/login', {\n      email,\n      password\n    }).catch((res) => {\n      if (res.json && res.json.type && res.json.status === 'totp_token_required') {\n        return res\n      }\n      throw new Error(`Failed to login '${email}'`)\n    })\n\n  if (loginRes.json.status && loginRes.json.status === 'totp_token_required') {\n    const totpRes = await frisby\n      .post(REST_URL + '/2fa/verify', {\n        tmpToken: loginRes.json.data.tmpToken,\n        totpToken: otplib.authenticator.generate(totpSecret)\n      })\n\n    return totpRes.json.authentication\n  }\n\n  return loginRes.json.authentication\n}\n\nasync function register ({ email, password, totpSecret }) {\n  const res = await frisby\n    .post(API_URL + '/Users/', {\n      email,\n      password,\n      passwordRepeat: password,\n      securityQuestion: null,\n      securityAnswer: null\n    }).catch(() => {\n      throw new Error(`Failed to register '${email}'`)\n    })\n\n  if (totpSecret) {\n    const { token } = await login({ email, password })\n\n    await frisby.post(\n      REST_URL + '/2fa/setup',\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'content-type': 'application/json'\n        },\n        body: {\n          password,\n          setupToken: insecurity.authorize({\n            secret: totpSecret,\n            type: 'totp_setup_secret'\n          }),\n          initialToken: otplib.authenticator.generate(totpSecret)\n        }\n      }).expect('status', 200).catch(() => {\n      throw new Error(`Failed to enable 2fa for user: '${email}'`)\n    })\n  }\n\n  return res\n}\n\nfunction getStatus (token) {\n  return frisby.get(\n    REST_URL + '/2fa/status',\n    {\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'content-type': 'application/json'\n      }\n    })\n}\n\ndescribe('/rest/2fa/verify', () => {\n  it('POST should return a valid authentication when a valid tmp token is passed', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 200)\n      .expect('header', 'content-type', /application\\/json/)\n      .expect('jsonTypes', 'authentication', {\n        token: Joi.string(),\n        umail: Joi.string(),\n        bid: Joi.number()\n      })\n      .expect('json', 'authentication', {\n        umail: `wurstbrot@${config.get('application.domain')}`\n      })\n  })\n\n  it('POST should fail if a invalid totp token is used', async () => {\n    const tmpTokenWurstbrot = insecurity.authorize({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    })\n\n    const totpToken = otplib.authenticator.generate('THIS9ISNT8THE8RIGHT8SECRET')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n\n  it('POST should fail if a unsigned tmp token is used', async () => {\n    const tmpTokenWurstbrot = jwt.sign({\n      userId: 10,\n      type: 'password_valid_needs_second_factor_token'\n    }, 'this_surly_isnt_the_right_key')\n\n    const totpToken = otplib.authenticator.generate('IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH')\n\n    await frisby.post(REST_URL + '/2fa/verify', {\n      headers: jsonHeader,\n      body: {\n        tmpToken: tmpTokenWurstbrot,\n        totpToken\n      }\n    })\n      .expect('status', 401)\n  })\n})"
    }
}
semgrep.bench.big-js.std.duration = 35.792 s
semgrep.bench.big-js.no-cache.duration = 35.122 s
semgrep.bench.big-js.max-cache.duration = 36.812 s
semgrep.bench.big-js.no-bloom.duration = 64.302 s
semgrep.bench.big-js.no-gc-tuning.duration = 36.439 s
semgrep.bench.big-js.set_filters.duration = 21.014 s
semgrep.bench.big-js.experimental.duration = 0.945 s
semgrep.bench.njsbox.std.duration = 46.223 s
semgrep.bench.njsbox.no-cache.duration = 46.602 s
semgrep.bench.njsbox.max-cache.duration = 46.255 s
semgrep.bench.njsbox.no-bloom.duration = 62.603 s
semgrep.bench.njsbox.no-gc-tuning.duration = 48.779 s
semgrep.bench.njsbox.set_filters.duration = 45.669 s
semgrep.bench.njsbox.experimental.duration = 43.836 s
semgrep.bench.zulip.std.duration = 6.464 s
semgrep.bench.zulip.no-cache.duration = 6.423 s
semgrep.bench.zulip.max-cache.duration = 6.481 s
semgrep.bench.zulip.no-bloom.duration = 6.349 s
semgrep.bench.zulip.no-gc-tuning.duration = 7.524 s
semgrep.bench.zulip.set_filters.duration = 5.683 s
semgrep.bench.zulip.experimental.duration = 6.256 s
semgrep.bench.apache.std.duration = 29.924 s
semgrep.bench.apache.no-cache.duration = 29.671 s
semgrep.bench.apache.max-cache.duration = 29.581 s
semgrep.bench.apache.no-bloom.duration = 25.659 s
semgrep.bench.apache.no-gc-tuning.duration = 34.735 s
semgrep.bench.apache.set_filters.duration = 23.510 s
semgrep.bench.apache.experimental.duration = 14.140 s
semgrep.bench.dropbox.std.duration = 3.057 s
semgrep.bench.dropbox.no-cache.duration = 3.131 s
semgrep.bench.dropbox.max-cache.duration = 3.070 s
semgrep.bench.dropbox.no-bloom.duration = 3.123 s
semgrep.bench.dropbox.no-gc-tuning.duration = 3.038 s
semgrep.bench.dropbox.set_filters.duration = 3.044 s
semgrep.bench.dropbox.experimental.duration = 3.297 s
semgrep.bench.coinbase.std.duration = 22.680 s
semgrep.bench.coinbase.no-cache.duration = 22.163 s
semgrep.bench.coinbase.max-cache.duration = 22.301 s
semgrep.bench.coinbase.no-bloom.duration = 22.356 s
semgrep.bench.coinbase.no-gc-tuning.duration = 22.385 s
semgrep.bench.coinbase.set_filters.duration = 22.146 s
semgrep.bench.coinbase.experimental.duration = 44.200 s
semgrep.bench.netflix.std.duration = 96.095 s
semgrep.bench.netflix.no-cache.duration = 98.659 s
semgrep.bench.netflix.max-cache.duration = 94.996 s
semgrep.bench.netflix.no-bloom.duration = 97.555 s
semgrep.bench.netflix.no-gc-tuning.duration = 99.626 s
semgrep.bench.netflix.set_filters.duration = 91.493 s
semgrep.bench.netflix.experimental.duration = 67.604 s ERROR: 22 extra findings, 22 missing findings
semgrep.bench.draios.std.duration = 47.539 s
semgrep.bench.draios.no-cache.duration = 47.706 s
semgrep.bench.draios.max-cache.duration = 47.844 s
semgrep.bench.draios.no-bloom.duration = 48.192 s
semgrep.bench.draios.no-gc-tuning.duration = 48.925 s
semgrep.bench.draios.set_filters.duration = 47.144 s
semgrep.bench.draios.experimental.duration = 53.680 s ERROR: 32 extra findings, 32 missing findings
semgrep.bench.0c34.std.duration = 2.641 s
semgrep.bench.0c34.no-cache.duration = 2.650 s
semgrep.bench.0c34.max-cache.duration = 2.609 s
semgrep.bench.0c34.no-bloom.duration = 2.622 s
semgrep.bench.0c34.no-gc-tuning.duration = 2.629 s
semgrep.bench.0c34.set_filters.duration = 2.602 s
semgrep.bench.0c34.experimental.duration = 2.762 s
semgrep.bench.rails.std.duration = 33.160 s
semgrep.bench.rails.no-cache.duration = 32.568 s
semgrep.bench.rails.max-cache.duration = 32.739 s
semgrep.bench.rails.no-bloom.duration = 30.107 s
semgrep.bench.rails.no-gc-tuning.duration = 30.582 s
semgrep.bench.rails.set_filters.duration = 27.315 s
semgrep.bench.rails.experimental.duration = 24.212 s
semgrep.bench.lodash.std.duration = 6.662 s
semgrep.bench.lodash.no-cache.duration = 6.400 s
semgrep.bench.lodash.max-cache.duration = 6.526 s
semgrep.bench.lodash.no-bloom.duration = 6.305 s
semgrep.bench.lodash.no-gc-tuning.duration = 6.757 s
semgrep.bench.lodash.set_filters.duration = 6.152 s
semgrep.bench.lodash.experimental.duration = 7.544 s
semgrep.bench.Vulnerable-Flask-App.std.duration = 26.483 s
semgrep.bench.Vulnerable-Flask-App.no-cache.duration = 26.341 s
semgrep.bench.Vulnerable-Flask-App.max-cache.duration = 26.540 s
semgrep.bench.Vulnerable-Flask-App.no-bloom.duration = 27.052 s
semgrep.bench.Vulnerable-Flask-App.no-gc-tuning.duration = 27.493 s
semgrep.bench.Vulnerable-Flask-App.set_filters.duration = 26.343 s
semgrep.bench.Vulnerable-Flask-App.experimental.duration = 35.875 s ERROR: 2 extra findings, 0 missing findings
semgrep.bench.DVWA.std.duration = 13.402 s
semgrep.bench.DVWA.no-cache.duration = 13.475 s
semgrep.bench.DVWA.max-cache.duration = 13.466 s
semgrep.bench.DVWA.no-bloom.duration = 13.736 s
semgrep.bench.DVWA.no-gc-tuning.duration = 13.688 s
semgrep.bench.DVWA.set_filters.duration = 13.050 s
semgrep.bench.DVWA.experimental.duration = 23.316 s
semgrep.bench.juice-shop.std.duration = 25.219 s
semgrep.bench.juice-shop.no-cache.duration = 25.170 s ERROR: 1 extra findings, 1 missing findings
semgrep.bench.juice-shop.max-cache.duration = 25.063 s ERROR: 1 extra findings, 1 missing findings
semgrep.bench.juice-shop.no-bloom.duration = 27.596 s ERROR: 1 extra findings, 1 missing findings
semgrep.bench.juice-shop.no-gc-tuning.duration = 27.597 s ERROR: 1 extra findings, 1 missing findings
semgrep.bench.juice-shop.set_filters.duration = 23.294 s ERROR: 1 extra findings, 1 missing findings
semgrep.bench.juice-shop.experimental.duration = 30.346 s ERROR: 3 extra findings, 1 missing findings
