{"results": [{"check_id": "bench.0c34.input.go.lang.security.audit.database.string-formatted-query.string-formatted-query", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/util/database/database.go", "start": {"line": 24, "col": 11}, "end": {"line": 24, "col": 68}, "extra": {"message": "String-formatted SQL query detected. This could lead to SQL injection if\nthe string is not sanitized properly. Audit this call to ensure the\nSQL is not manipulatable by external data.\n", "metavars": {"$X": {"start": {"line": 24, "col": 54, "offset": 457}, "end": {"line": 24, "col": 67, "offset": 470}, "abstract_content": "config.Dbname", "unique_id": {"type": "AST", "md5sum": "c5a2327cc6efacbadb8b999f2a9a4aad"}}, "$OBJ": {"start": {"line": 24, "col": 11, "offset": 414}, "end": {"line": 24, "col": 13, "offset": 416}, "abstract_content": "db", "unique_id": {"type": "id", "value": "db", "kind": "Local", "sid": 4}}}, "metadata": {"owasp": "A1: Injection", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "source-rule-url": "https://github.com/securego/gosec"}, "severity": "WARNING", "is_ignored": false, "lines": "\t_, err = db.Exec(\"CREATE DATABASE IF NOT EXISTS \" + config.Dbname)"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/user/user.go", "start": {"line": 160, "col": 12}, "end": {"line": 160, "col": 21}, "extra": {"message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n", "metavars": {}, "metadata": {"owasp": "A9: Using Components with Known Vulnerabilities", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "source-rule-url": "https://github.com/securego/gosec#available-rules"}, "severity": "WARNING", "is_ignored": false, "lines": "\thasher := md5.New()"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/vulnerability/idor/idor.go", "start": {"line": 164, "col": 12}, "end": {"line": 164, "col": 21}, "extra": {"message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n", "metavars": {}, "metadata": {"owasp": "A9: Using Components with Known Vulnerabilities", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "source-rule-url": "https://github.com/securego/gosec#available-rules"}, "severity": "WARNING", "is_ignored": false, "lines": "\thasher := md5.New()"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/vulnerability/csa/csa.go", "start": {"line": 62, "col": 12}, "end": {"line": 62, "col": 21}, "extra": {"message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n", "metavars": {}, "metadata": {"owasp": "A9: Using Components with Known Vulnerabilities", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "source-rule-url": "https://github.com/securego/gosec#available-rules"}, "severity": "WARNING", "is_ignored": false, "lines": "\thasher := md5.New()"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.net.formatted-template-string.formatted-template-string", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/vulnerability/xss/xss.go", "start": {"line": 52, "col": 3}, "end": {"line": 65, "col": 4}, "extra": {"message": "Found a formatted template string passed to 'template.HTML()'.\n'template.HTML()' does not escape contents. Be absolutely sure\nthere is no user-controlled data in this template. If user data\ncan reach this template, you may have a XSS vulnerability.\n", "metavars": {"$P": {"start": {"line": 52, "col": 19, "offset": 1050}, "end": {"line": 52, "col": 26, "offset": 1057}, "abstract_content": "Sprintf", "unique_id": {"type": "AST", "md5sum": "dc7c4847ac9488d51f4bc13cc86a42a9"}}, "$T": {"start": {"line": 52, "col": 3, "offset": 1034}, "end": {"line": 52, "col": 11, "offset": 1042}, "abstract_content": "notFound", "unique_id": {"type": "id", "value": "notFound", "kind": "Local", "sid": 10}}}, "metadata": {"cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"]}, "severity": "WARNING", "is_ignored": false, "lines": "\t\tnotFound := fmt.Sprintf(\"<b><i>%s</i></b> not found\",term)\n\t\tvalue := fmt.Sprintf(\"%s\", term)\n\n\t\tif term == \"\"{\n\t\t\tdata[\"term\"] = \"\"\n\t\t}else if vulnDetails == \"\"{\n\t\t\tdata[\"value\"] = template.HTML(value)\n\t\t\tdata[\"term\"] = template.HTML(notFound) //vulnerable function\n\t\t}else{\n\t\t\tvuln := fmt.Sprintf(\"<b>%s</b>\",term)\n\t\t\tdata[\"value\"] = template.HTML(value)\n\t\t\tdata[\"term\"] = template.HTML(vuln)\n\t\t\tdata[\"details\"] = vulnDetails\n\t\t}"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.net.formatted-template-string.formatted-template-string", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/vulnerability/xss/xss.go", "start": {"line": 53, "col": 3}, "end": {"line": 65, "col": 4}, "extra": {"message": "Found a formatted template string passed to 'template.HTML()'.\n'template.HTML()' does not escape contents. Be absolutely sure\nthere is no user-controlled data in this template. If user data\ncan reach this template, you may have a XSS vulnerability.\n", "metavars": {"$P": {"start": {"line": 53, "col": 16, "offset": 1108}, "end": {"line": 53, "col": 23, "offset": 1115}, "abstract_content": "Sprintf", "unique_id": {"type": "AST", "md5sum": "dc7c4847ac9488d51f4bc13cc86a42a9"}}, "$T": {"start": {"line": 53, "col": 3, "offset": 1095}, "end": {"line": 53, "col": 8, "offset": 1100}, "abstract_content": "value", "unique_id": {"type": "id", "value": "value", "kind": "Local", "sid": 11}}}, "metadata": {"cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"]}, "severity": "WARNING", "is_ignored": false, "lines": "\t\tvalue := fmt.Sprintf(\"%s\", term)\n\n\t\tif term == \"\"{\n\t\t\tdata[\"term\"] = \"\"\n\t\t}else if vulnDetails == \"\"{\n\t\t\tdata[\"value\"] = template.HTML(value)\n\t\t\tdata[\"term\"] = template.HTML(notFound) //vulnerable function\n\t\t}else{\n\t\t\tvuln := fmt.Sprintf(\"<b>%s</b>\",term)\n\t\t\tdata[\"value\"] = template.HTML(value)\n\t\t\tdata[\"term\"] = template.HTML(vuln)\n\t\t\tdata[\"details\"] = vulnDetails\n\t\t}"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.net.formatted-template-string.formatted-template-string", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/vulnerability/xss/xss.go", "start": {"line": 61, "col": 4}, "end": {"line": 63, "col": 38}, "extra": {"message": "Found a formatted template string passed to 'template.HTML()'.\n'template.HTML()' does not escape contents. Be absolutely sure\nthere is no user-controlled data in this template. If user data\ncan reach this template, you may have a XSS vulnerability.\n", "metavars": {"$P": {"start": {"line": 61, "col": 16, "offset": 1325}, "end": {"line": 61, "col": 23, "offset": 1332}, "abstract_content": "Sprintf", "unique_id": {"type": "AST", "md5sum": "dc7c4847ac9488d51f4bc13cc86a42a9"}}, "$T": {"start": {"line": 61, "col": 4, "offset": 1313}, "end": {"line": 61, "col": 8, "offset": 1317}, "abstract_content": "vuln", "unique_id": {"type": "id", "value": "vuln", "kind": "Local", "sid": 12}}}, "metadata": {"cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"]}, "severity": "WARNING", "is_ignored": false, "lines": "\t\t\tvuln := fmt.Sprintf(\"<b>%s</b>\",term)\n\t\t\tdata[\"value\"] = template.HTML(value)\n\t\t\tdata[\"term\"] = template.HTML(vuln)"}}, {"check_id": "bench.0c34.input.go.lang.security.audit.net.formatted-template-string.formatted-template-string", "path": "/Users/emma/workspace/semgrep/perf/bench/0c34/input/govwa/vulnerability/xss/xss.go", "start": {"line": 96, "col": 2}, "end": {"line": 100, "col": 44}, "extra": {"message": "Found a formatted template string passed to 'template.HTML()'.\n'template.HTML()' does not escape contents. Be absolutely sure\nthere is no user-controlled data in this template. If user data\ncan reach this template, you may have a XSS vulnerability.\n", "metavars": {"$P": {"start": {"line": 96, "col": 18, "offset": 2152}, "end": {"line": 96, "col": 25, "offset": 2159}, "abstract_content": "Sprintf", "unique_id": {"type": "AST", "md5sum": "dc7c4847ac9488d51f4bc13cc86a42a9"}}, "$T": {"start": {"line": 96, "col": 2, "offset": 2136}, "end": {"line": 96, "col": 10, "offset": 2144}, "abstract_content": "inlineJS", "unique_id": {"type": "id", "value": "inlineJS", "kind": "Local", "sid": 21}}}, "metadata": {"cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"]}, "severity": "WARNING", "is_ignored": false, "lines": "\tinlineJS := fmt.Sprintf(js,uid, p.Name, p.City, p.PhoneNumber)\n\n\tdata[\"title\"] = \"Cross Site Scripting\"\n\n\tdata[\"inlineJS\"] = template.HTML(inlineJS) //this will render the javascript on client browser"}}], "errors": []}
