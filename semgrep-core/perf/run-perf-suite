#! /usr/bin/env python3
#
# Run semgrep-core on a series of pairs (target, pattern) and report the
# time it takes. Optionally upload the results to the semgrep dashboard.
#
import argparse
import os
import subprocess
import sys
import time
import urllib.request
from typing import List

HOST = "https://dashboard.semgrep.dev"


class Test:
    def __init__(self, name: str, lang: str, target: str):
        # Test name. Pattern file name is NAME.sgrep.
        self.name = name

        # Language ID
        self.lang = lang

        # Target file name
        self.target = target


TESTS = [
    # Control. No other test can be faster than this one.
    Test("empty", "js", "empty.js"),
    # Match on a simple statement, no ellipsis. Serves as the baseline
    # for the other tests on the same file.
    Test("stmts-simple", "js", "l10000.js"),
    # Single ellipsis on statements, with backreference to statement
    # that matches in many places: $A; ... foo($A);
    Test("stmts-ellipsis", "js", "l10000.js"),
    # Double ellipsis on statements: $A; ... $B; ... foo($A);
    Test("stmts-double-ellipsis", "js", "l1000.js"),
]


class Result:
    def __init__(self, name: str, duration: float):
        self.name = name
        self.duration = duration


def run_tests(dirname: str, tests: List[Test], no_cache: bool) -> List[Result]:
    results = []
    for test in tests:
        pattern_file = os.path.join(dirname, test.name + ".sgrep")
        target_file = os.path.join(dirname, test.target)

        t1 = time.time()
        args = [
            "semgrep-core",
            "-lang",
            test.lang,
            "-f",
            pattern_file,
            target_file,
        ]
        if no_cache:
            args.append("-no_opt_cache")
        else:
            args.append("-opt_cache")
        p = subprocess.run(args)  # nosem
        t2 = time.time()

        p.check_returncode()
        duration = t2 - t1
        print(f"{test.name}: {duration:.6f} s")
        results.append(Result(test.name, duration))
    return results


def upload_results(results: List[Result]) -> None:
    for res in results:
        url = f"{HOST}/api/metric/semgrep.core.perf.{res.name}.seconds"
        r = urllib.request.urlopen(  # nosem: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
            url=url,
            data=str(res.duration).encode("ascii"),
        )
        print(r.read().decode())


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "name", metavar="NAME", type=str, nargs="?", help="run just this test"
    )
    parser.add_argument(
        "--list", help="list available tests and exit", action="store_true"
    )
    parser.add_argument(
        "--no-cache", help="disable caching during matching", action="store_true"
    )
    parser.add_argument(
        "--upload", help="upload results to semgrep dashboard", action="store_true"
    )
    args = parser.parse_args()

    if args.list:
        for test in TESTS:
            print(test.name)
    else:
        tests = []
        if args.name:
            tests = [test for test in TESTS if test.name == args.name]
        else:
            tests = TESTS
        results = run_tests("input", tests, args.no_cache)
        if args.upload:
            upload_results(results)


if __name__ == "__main__":
    main()
